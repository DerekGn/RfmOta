<?xml version="1.0"?>
<doc>
    <assembly>
        <name>RfmOta</name>
    </assembly>
    <members>
        <member name="T:RfmOta.Exceptions.OtaException">
            <summary>
            An <see cref="T:System.Exception"/> that is thrown when an error occurs during Ota updates
            </summary>
        </member>
        <member name="M:RfmOta.Exceptions.OtaException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:RfmOta.Exceptions.OtaException"/> class.
            </summary>
        </member>
        <member name="M:RfmOta.Exceptions.OtaException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:RfmOta.Exceptions.OtaException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:RfmOta.Exceptions.OtaException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:RfmOta.Exceptions.OtaException"/> class.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="inner">The exception that is the cause of the current exception, 
            or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="M:RfmOta.Exceptions.OtaException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:RfmOta.Exceptions.OtaException"/> class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds 
            the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information
            about the source or destination.</param>
        </member>
        <member name="T:RfmOta.Factory.IIntelHexStreamReaderFactory">
            <summary>
            Defines a factory for <see cref="T:HexIO.IIntelHexStreamReader"/> instances
            </summary>
        </member>
        <member name="M:RfmOta.Factory.IIntelHexStreamReaderFactory.Create(System.IO.Stream)">
            <summary>
            Create an instance of a <see cref="T:HexIO.IIntelHexStreamReader"/>
            </summary>
            <param name="stream">The <see cref="T:System.IO.Stream"/> to create the reader for</param>
            <returns>An instance of <see cref="T:HexIO.IIntelHexStreamReader"/></returns>
        </member>
        <member name="T:RfmOta.Factory.IntelHexStreamReaderFactory">
            <summary>
            A factory class for creation of <see cref="T:HexIO.IntelHexStreamReader"/> instances
            </summary>
        </member>
        <member name="M:RfmOta.Factory.IntelHexStreamReaderFactory.Create(System.IO.Stream)">
            <inheritdoc/>
        </member>
        <member name="T:RfmOta.FlashInfo">
            <summary>
            The flash info read from the device
            </summary>
        </member>
        <member name="M:RfmOta.FlashInfo.#ctor(System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Create an instance of a <see cref="T:RfmOta.FlashInfo"/>
            </summary>
            <param name="startAddress">The start address of the flash</param>
            <param name="numberOfPages">The number of flash pages</param>
            <param name="pageSize">The page size in bytes</param>
        </member>
        <member name="P:RfmOta.FlashInfo.StartAddress">
            <summary>
            The start address of the flash segment
            </summary>
        </member>
        <member name="P:RfmOta.FlashInfo.NumberOfPages">
            <summary>
            The number of flash pages
            </summary>
        </member>
        <member name="P:RfmOta.FlashInfo.PageSize">
            <summary>
            The page size in bytes
            </summary>
        </member>
        <member name="P:RfmOta.FlashInfo.UpperAddress">
            <summary>
            The upper address of the flash memory
            </summary>
        </member>
        <member name="M:RfmOta.FlashInfo.ToString">
            <inheritdoc/>
        </member>
        <member name="T:RfmOta.FlashWrites">
            <summary>
            A class that collates flash writes into a single set of bytes
            </summary>
        </member>
        <member name="M:RfmOta.FlashWrites.#ctor">
            <summary>
            Create an instance of a <see cref="T:RfmOta.FlashWrites"/>
            </summary>
        </member>
        <member name="P:RfmOta.FlashWrites.Writes">
            <summary>
            The <see cref="T:System.Collections.Generic.IReadOnlyList`1"/> of <see cref="T:System.Collections.Generic.IReadOnlyList`1"/> of bytes to flash to the device
            </summary>
        </member>
        <member name="M:RfmOta.FlashWrites.AddWrite(System.Collections.Generic.IReadOnlyList{System.Byte})">
            <summary>
            Add a flash write
            </summary>
            <param name="write"></param>
        </member>
        <member name="M:RfmOta.FlashWrites.GetWritesBytes">
            <summary>
            Get the consolidated set of flash writes
            </summary>
            <returns>A <see cref="T:System.Collections.Generic.IReadOnlyList`1"/> of flash bytes to write to the devices flash memory</returns>
        </member>
        <member name="T:RfmOta.IOtaService">
            <summary>
            Defines the interface for the Ota service
            </summary>
        </member>
        <member name="M:RfmOta.IOtaService.OtaUpdate(System.Int32,System.IO.Stream,System.UInt32@)">
            <summary>
            Perform an Ota update of an Rfm69 node that is running in bootloader mode
            </summary>
            <param name="outputPower">The output power for the RfmUsb</param>
            <param name="stream">The stream for the hex file to upload to the device</param>
            <param name="crc">The crc calculated for the uploaded flash image</param>
            <returns>true if the update succeeds</returns>
            <remarks>The <see cref="T:RfmOta.IOtaService"/> depends on an <see cref="T:RfmUsb.IRfmUsb"/> instance to transmit and receive packets.
            The containing application must open and close the <see cref="T:RfmUsb.IRfmUsb"/> instance.</remarks>
        </member>
        <member name="M:RfmOta.OtaService.#ctor(Microsoft.Extensions.Logging.ILogger{RfmOta.IOtaService},RfmUsb.IRfmUsb,RfmOta.Factory.IIntelHexStreamReaderFactory)">
            <summary>
            Create an instance of a <see cref="T:RfmOta.OtaService"/>
            </summary>
            <param name="logger"></param>
            <param name="rfmUsb"></param>
            <param name="hexStreamReaderFactory"></param>
        </member>
        <member name="M:RfmOta.OtaService.OtaUpdate(System.Int32,System.IO.Stream,System.UInt32@)">
            <inheritdoc/>
        </member>
        <member name="T:RfmOta.OtaServiceExtensions">
            <summary>
            <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/> extensions
            </summary>
        </member>
        <member name="M:RfmOta.OtaServiceExtensions.AddOta(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Add the Ota services to the <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/>
            </summary>
            <param name="serviceCollection">The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/> to add the ota services</param>
            <returns>The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/></returns>
        </member>
        <member name="T:RfmOta.PayloadSizes">
            <summary>
            The expected payload sizes for each of the request types
            </summary>
        </member>
        <member name="T:RfmOta.RequestType">
            <summary>
            The OTA request type
            </summary>
        </member>
        <member name="F:RfmOta.RequestType.Crc">
            <summary>
            Calculate the CRC of the application flash memory and store to device
            </summary>
        </member>
        <member name="F:RfmOta.RequestType.Ping">
            <summary>
            Ping the bootloader
            </summary>
        </member>
        <member name="F:RfmOta.RequestType.Write">
            <summary>
            Write a set of bytes to flash
            </summary>
        </member>
        <member name="F:RfmOta.RequestType.Reboot">
            <summary>
            Reboot the device
            </summary>
        </member>
        <member name="F:RfmOta.RequestType.FlashSize">
            <summary>
            Get the flash size from the device
            </summary>
        </member>
        <member name="T:RfmOta.ResponseType">
            <summary>
            The OTA response to the <see cref="T:RfmOta.RequestType"/>
            </summary>
        </member>
        <member name="F:RfmOta.ResponseType.Ok">
            <summary>
            The requested operation executed correctly
            </summary>
        </member>
        <member name="F:RfmOta.ResponseType.Crc">
            <summary>
            Calculate the application flash memory range crc
            </summary>
        </member>
        <member name="F:RfmOta.ResponseType.Ping">
            <summary>
            Ping the boot loader
            </summary>
        </member>
        <member name="F:RfmOta.ResponseType.FlashSize">
            <summary>
            Get the flash size from the target device
            </summary>
        </member>
        <member name="F:RfmOta.ResponseType.ErrorNumberWrites">
            <summary>
            The number of flash writes exceed the allowed number in one operation
            </summary>
        </member>
        <member name="F:RfmOta.ResponseType.ErrorInvalidLength">
            <summary>
            The request message had an invalid length
            </summary>
        </member>
        <member name="F:RfmOta.ResponseType.ErrorInvalidWrite">
            <summary>
            
            </summary>
        </member>
        <member name="F:RfmOta.ResponseType.ErrorInvalidWriteAddress">
            <summary>
            The flash write address is out of range
            </summary>
        </member>
    </members>
</doc>
